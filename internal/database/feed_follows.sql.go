// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows(user_id, feed_id, created_at, updated_at)
    VALUES ($1, $2, $3, $4)
    RETURNING id, user_id, feed_id, created_at, updated_at
) SELECT inserted_feed_follow.id, inserted_feed_follow.user_id, inserted_feed_follow.feed_id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, feeds.name AS feed_name, users.name AS user_name
FROM inserted_feed_follow
JOIN feeds
ON inserted_feed_follow.feed_id = feeds.id
JOIN users
ON inserted_feed_follow.user_id = users.id
`

type CreateFeedFollowParams struct {
	UserID    uuid.UUID
	FeedID    int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowRow struct {
	ID        int32
	UserID    uuid.UUID
	FeedID    int32
	CreatedAt time.Time
	UpdatedAt time.Time
	FeedName  string
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows
WHERE feed_follows.user_id = $1 AND feed_id IN (
    SELECT id
    FROM feeds
    WHERE feeds.url = $2
)
`

type DeleteFeedFollowParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.Url)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT feed_follows.id, feeds.name AS feed_name, users.name AS user_name
FROM feed_follows
JOIN feeds
ON feed_follows.feed_id = feeds.id
JOIN users
ON feed_follows.user_id = users.id
WHERE feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	ID       int32
	FeedName string
	UserName string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.ID, &i.FeedName, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextToFetch = `-- name: GetNextToFetch :one
SELECT f.id, name, url, f.created_at, f.updated_at, last_fetched_at
FROM feeds f
JOIN feed_follows ff
ON f.id = ff.feed_id
WHERE ff.user_id = $1
ORDER BY last_fetched_at
LIMIT 1
`

type GetNextToFetchRow struct {
	ID            int32
	Name          string
	Url           string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	LastFetchedAt sql.NullTime
}

func (q *Queries) GetNextToFetch(ctx context.Context, userID uuid.UUID) (GetNextToFetchRow, error) {
	row := q.db.QueryRowContext(ctx, getNextToFetch, userID)
	var i GetNextToFetchRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}
